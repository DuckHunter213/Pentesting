
#es la fecha y hora de cuando se habre el program y crea una carpeta temporal
HT_FOLDER="HT-WPS-Breaker$(date "+%T" | tr -d ":")"
Temporary="/tmp/${HT_FOLDER}"

#Verifica el folder de los archivos temporales
Ver_Dir=`ls /tmp | grep -E ^${HT_FOLDER}$`

if [ "$Ver_Dir" != "" ];then
    rm -rf ${Temporary}
    mkdir ${Temporary}
else
    mkdir ${Temporary}
fi

#Verify Desktop Folder
if [ $(ls ~ | grep Desktop) != "" ]
then
    Desktop_PATH=~/Desktop
elif [ $(ls ~ | grep Bureau) != "" ]
then
    Desktop_PATH=~/Bureau
else
    Desktop_PATH=~
fi

#limpia el espacio de trabajo y saluda
RM_HT_FOLDER() {
    echo ""
    echo ""
    echo ""
    echo -e "$White [${Green} OK ${White}]$Green HT-WPS Breaker$White By$BYellow Silent Ghost X."
    echo -e "$White [${Green} OK ${White}]$Green Traducciones $White Por $BYellow DuckHunter213."
    echo ""
    echo -e "$White [${Red} !! ${White}] Quitando archivos temporales."
    rm -rf ${Temporary}
    sleep 1
    echo ""
    echo -e "$White [${Red} ++ ${White}]$Green Greetz to ${White}: ${Cyan}AKAS${White} &&${Cyan} Fantome195${White} ."
    echo ""
    exit
}

#Sale y hace una limpieza de archivos
exit_function() {
    echo ""
    echo ""
    echo ""
    echo -e "$White [${Red}!$White] Quitando cualquier archivo temporal ."
    rm -rf ${Temporary}
    sleep 1
    echo ""
    if [ "$mode_monitor" == "active" ]
    then
        echo -e "$White [ ${Red} ! ${White}] $BRed Parar $White el ${Green} Modo monitor $White."
        ifconfig $mon down && iwconfig $mon mode managed && ifconfig $mon up > /dev/null 2> /dev/null &
        echo ""
    fi
    echo -e "$White [+]$Green Greetz to : ${Cyan}AKAS${White} &&${Cyan} Fantome195${White} ."
    echo -e "$DefaultColor"
    exit
}

#Parece que esta función se llama cuando truena. Te informa que no se obtuvo la contraseña y limpia los archivos
kill_wep_function() {
    WEP_KILL=1
    Quit=1
    IVs=20000
    echo ""
    echo -e "          ${Yellow}>>${White} El proceso de crackeo fue ${Red}parado ${White}, mas suerte la proxima ves ."
    echo -e "          ${Yellow}>>${White} Matando todos los procesos en ${Red} segundo plano${White} ."
    echo ""
    echo -e "$White          [${Red}!${White}]$White Lo siento no encontramos la clave, mas suerte la proxima ves."
    kill -9 $Airodump_PID 2> /dev/null
    kill -9 $arpreplay_PID 2> /dev/null
    kill -9 $aircrack_PID 2> /dev/null
    tset
    exit_function
}
#Parece que todos los kill se llaman al tronar o algo así

#En realidad creo que lo hace cada que sale del programa ayer que lo estuve probando....
kill_reaver() {
    kill -9 $ReaverID 2> /dev/null
    Quit=1
}
kill_wash() {
    kill -9 $WashID 2> /dev/null
    Quit=1
}
kill_load() {
    PID=$(($PID-1))
    kill -9 $PID 2> /dev/null
}
kill_Hidden() {
    Quit=1
    echo ""
    echo ""
    echo -e "          ${Yellow}>>${White} El proceso de crackeo fue ${Red}parado ${White}, mas suerte la proxima ves ."
    echo -e "          ${Yellow}>>${White} Matando todos los procesos en ${Red} segundo plano${White} ."
    echo ""
    echo -e "$White          [${Red}!${White}]$White Lo siento el nombre no fue encontrado, mas suerte la proxima ves ."
    kill -9 $aireplayID 2> /dev/null
    kill -9 $Airodump_PID 2> /dev/null
    exit_function
}